//npm i -g typescript

//create index.js
//create index.ts

console.log("Hello Typescript!")
console.log("hello again")

//run compiler = tsc index.ts -w (-w means automatically)

//create index.html 

//html:5 --boilerplate html 

<h1>Typescript D1</h1>
<script src= "index.js"></script>

let x = "Stefano"
console.log(x.toUpperCase())

//Ts already figured out the type of X! automatically 
//because of the initial calue we assigned to x 
//this is called TYPE INFERENCE- automatically understand the type of variables

let y : number
y = 50
//y = "50" --> gives an error

let z : string = "Stefano"
//at the same time 
//let z = "Stefano" also correct 
//explicit type assignment 

let w : boolean = false
//w. --> gives and auto method()

const addition = (num1,num2) => num1 + num2
console.log(adition(5,6))
console.log(adition("1","3")) --> returns 13

const additionForJustNumbers = (num1, num2) => {
	if(typeof num1 ==="number" && typeof num2 ==="number" )
	{return num1 + num2}
	else
	{return "The arguments are not numbers!"}
}

console.log(additionForJustNumbers(10,20)) -->30
console.log(additionForJustNumbers(10,"20")) ---> error message

const additionWithTypings = (num1 : number, num2 : number) => num1 + num2
console.log(additionWithTypings(30,35)) --> 65
console.log(additionWithTypings(30,"35")) -->error

const mixedAddition = (arg1:number, arg2: string) =>{
	let random = Math.floor(Math.random() * 2) --> 0 and 1
	if (random === 0)
	{return arg1}
	else
	{return arg2}
}
//UNION TYPE

//types: string, number, boolean, null, etc
//any --> a way to give anything 

let whateverType : any 
whateverType. --> none types, methods
//somethimes Typescript will make you mad
//it is always your fault, there are examples that you have to shut typescript down

let toUpperCase = (num1: any) =>{ //it will shut up the engine, avoid typescript checking 
	num1.toUpperCase()
}//this is bad, not use any...killing the purpose of using typescript

//console.log(toUpperCase(50)) --> comiling but error in browser

//single type in the type assignment 

let mixAddition2 = (arg1: number, arg2: string | string) => {// can be a number OR a string 
	if(typeof arg2 === "number")
	{return arg2 * 5}
	else
	{return arg1}
}

// number | string it's an UNION TYPE
//the number comes from the Theory of Sets --> Ven diagrams 
//Intersection or Union 
//number & string it's an INTERSECTION type 
//4.5 release of Typesrcipt

type CustomType = string | number
//CustomType , start with capital letter

let multiplyBy = (numberToMultiply : number, byWhat?: number) => {//by adding ? if it is there
	//return numberToMultiply * byWhat
	if(byWhat)
	{return numberToMultiply * byWhat}
	else
	{return numberToMultiply}
}

//console.log(multiplyBy(20,5))
console.log(multiplyBy(30))// calling the second argument as undefind

//ARRAYS
//How to declare

//let myArray = []

let myArray : string[]
myArray = []
myArray.push("Stefano")
//myArray.push(20) --> cannot add because of declaration

let myArray : Array<string> --> <> stand for TYPE ARGUMENT

let mixedArray: CustomType[] = []
mixedArray.push("Stefano")
mixedArray.push(20)
//you can push both 

myArray.forEach(element => console.log(element.slice(0,1).toLowerCase()))

//maybe you want an array with fixed types in specific positions
//[string, string, string,...]
//[string | number, string | number, ..]
//[string, numberm string] -->fixed types for fixed possitions
//write a TUPLE --> sets types in a specific position in an array or sets the length
let specificPositions: [string, number, string] = ["stefano", 50, "marti"]

//Objects
let obj = {} --> obj is of type empty object

//obj.name = "Stefano" --> cannot append things over time 

let obj = {
	name : "",
	age: 90
}

obj.name = "Stefano" --> now you can append 
obj.age = 91

//obj.age = "25" --> this is not allowed, how can we define the shape of an object in advance ?
//interface

interface StriveStudent {
	name: string
	age: string | number
	//age : CustomType
	zipCode : number
	skills : string[]
}

let fs_sep21Student: StriveStudent = {
	name : "Marti",
	age : "N/A",
	zipCode : 12345
	skills: ["react", "redux"]
}

//interface defining the shape of the object

type StriveStudent = Student & StriveProperties
//& is called a TYPE INTERSECTION

interface StriveWebStudent extends Student {
	skills: string[]
	batch: string
	track: "FS" | "FE"
}

let roberta: StriveWebStudent

//if you want to start from previous type /interface and add properties
//types can be intesected, while interfaces must be extended

let roberta: StriveWebStudent = {
	firstName: "Roberta",
	lastName: "Matera",
	email: "roberta.matera@gmail.com",
	skills: ["react","redux"],
	batch: "FE-Sept21",
	track: "FE",
}

// A type could be unified 

interface Area {
	city: string
	country: string
	zipCode?: number 
}

interface StriveTeacher extends Student {
	//firstName, lastName and email are now inherited
	role: string
	skills: Array<string> // different way of initializing an array 
	area?: Area
}

let arrayOfTheachers; StriveTeacher[] = []

arrayOfTeachers.push({
	firstName: "Stefano",
	lastName: "Casasola",
	email: "stefano.casasola@gmail.com",
	role: "Teacher",
	skills: ["frontend"],
	area:{
		city: "Gorizia",
		country: "Italy",
		zipcode: 12345,
	},
})

arrayOfTeachers.push({
	firstName: "Diego",
	lastName: "Banovaz",
	email: "diego.banovaz@gmail.com",
	role: "MegaAdmin",
	skills: ["Everything"],
	
})

let justSomeProperties = arrayOfTeachers.filter(teacher => teacher.area).map(teacher => ({name:teacher.firstName}))

let filteredStefano = arrayOfTeachers.find(teacher => teacher.firstName === "Stefano")

console.log(filteredStefano.area!.zipCode!.toString()) // real world scenario , area is not mandatory ..area! - will not break the code 

//the exclamation mark is marking a possible undefined property as present
//you are telling TS : "I know what i am doing"


